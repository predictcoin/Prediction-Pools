{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "bdc57f3e216d37c0af76ef3460e9d5f4b3a17d020f159ce87a94d832333198d6",
          "withoutMetadata": "705cdb91be2e67124f23cc51d799f069fca0f36720d7019446b89aa5929ab1b6",
          "linkedWithoutMetadata": "705cdb91be2e67124f23cc51d799f069fca0f36720d7019446b89aa5929ab1b6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingBNB(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8192",
              "src": "contracts/LoserPredictionPool.sol:50"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8437",
              "src": "contracts/LoserPredictionPool.sol:52"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:54"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:56"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7071",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:59"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3490_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:62"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:64"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:66"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:68"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8192": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8437": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7071": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3490_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3490_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "8e5f905a5de7ae45f9bc7e1f2277388128d9b71dc874d3d3e823d164fc01eabf",
          "withoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c",
          "linkedWithoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4671_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4661_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4545)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4671_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4671_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4671_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4622"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4622": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4661_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4661_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4545)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4545": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8192",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8192": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "6c055a48a952101415a7a52613609dc5ef8215d81b8b6a71f48f0af1223684ed",
          "withoutMetadata": "dba2bf51b464dbdfcf5a6f3fb7348369afee6cbaa5da8b4e44cadb328a809b0c",
          "linkedWithoutMetadata": "dba2bf51b464dbdfcf5a6f3fb7348369afee6cbaa5da8b4e44cadb328a809b0c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8192",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8437",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7071",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:59"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7112_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7101_storage))",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8192": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8437": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7071": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7112_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7112_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7101_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7101_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7101_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "32a4f503045a887240646a4a8f97c22ac31028d4cfbd1a8b30469758162bef7c",
          "withoutMetadata": "640b530f731b91ed1f1dc571596fd8fc5d6258bca96e95dc81c74c7afb98407d",
          "linkedWithoutMetadata": "640b530f731b91ed1f1dc571596fd8fc5d6258bca96e95dc81c74c7afb98407d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingBNB(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "8e5f905a5de7ae45f9bc7e1f2277388128d9b71dc874d3d3e823d164fc01eabf",
          "withoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c",
          "linkedWithoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4617_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4627_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4627_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4578"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4578": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4617_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4617_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4501": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "38abbaa477d38e7ff195e9fd3c2b679812113a1457ed5051ef985ce46719f0a7",
          "withoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845",
          "linkedWithoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7066_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7066_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7066_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7057_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7057_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ad1c4dc15b41254939c49208832adc035a2772938eca4d549c266583fcd666d7",
          "withoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0",
          "linkedWithoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "8e5f905a5de7ae45f9bc7e1f2277388128d9b71dc874d3d3e823d164fc01eabf",
          "withoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c",
          "linkedWithoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4617_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4627_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4627_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4578"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4578": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4617_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4617_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4501": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "38abbaa477d38e7ff195e9fd3c2b679812113a1457ed5051ef985ce46719f0a7",
          "withoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845",
          "linkedWithoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7066_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7066_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7066_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7057_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7057_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ad1c4dc15b41254939c49208832adc035a2772938eca4d549c266583fcd666d7",
          "withoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0",
          "linkedWithoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "c9b8cd913bc52942826df70442cfd8f3e6b5ccb4d656d3130d36cc925abcdbec",
          "withoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c",
          "linkedWithoutMetadata": "62d056af80d9efc6504f04cce669090202ce7af6e7ffd55e7b9bac78217ff83c"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4617_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4627_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4627_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4578"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4578": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4617_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4617_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4501": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "38abbaa477d38e7ff195e9fd3c2b679812113a1457ed5051ef985ce46719f0a7",
          "withoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845",
          "linkedWithoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7066_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7066_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7066_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7057_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7057_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ad1c4dc15b41254939c49208832adc035a2772938eca4d549c266583fcd666d7",
          "withoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0",
          "linkedWithoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "42dd2080f911eb5426728e8647e24f853991ec4fe34ef62a2ca458bbce605698",
          "withoutMetadata": "722acc4d1f7e8a21375205f0a8697db9588f90a0681341fd53657cf02294379f",
          "linkedWithoutMetadata": "722acc4d1f7e8a21375205f0a8697db9588f90a0681341fd53657cf02294379f"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4617_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4627_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4627_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4578"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4578": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4617_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4617_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4501": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "38abbaa477d38e7ff195e9fd3c2b679812113a1457ed5051ef985ce46719f0a7",
          "withoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845",
          "linkedWithoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7066_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7066_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7066_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7057_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7057_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ad1c4dc15b41254939c49208832adc035a2772938eca4d549c266583fcd666d7",
          "withoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0",
          "linkedWithoutMetadata": "db26d95df15bbe3c71dff424f1ec6632c8bb928692c00366bc83b64589098ff0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "e1ebe3672cc754d59ddcc6d96256641ded1364676aceff51667dc706f4501b09",
          "withoutMetadata": "04546afd0a02515d2ff52197443017197cdf2ec4c0f677511fb65c4abbd10bcf",
          "linkedWithoutMetadata": "04546afd0a02515d2ff52197443017197cdf2ec4c0f677511fb65c4abbd10bcf"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4617_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4627_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4627_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4627_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4578"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4578": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4617_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4617_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4501)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4501": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "38abbaa477d38e7ff195e9fd3c2b679812113a1457ed5051ef985ce46719f0a7",
          "withoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845",
          "linkedWithoutMetadata": "3e0edf9dc751699014d43b2d2aa15543557aa72defa93bcba22cf0b147357845"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)8104",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8349",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7027",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7066_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)8104": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8349": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7027": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7066_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7066_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7057_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7057_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7057_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "4440c0db54b51f3d9cc22cb5eea085122a60b500b28f6f02023a84feb88f1dbb",
          "withoutMetadata": "8038bc00aca8b282baaf22076831784a3dfca6770ff6c8898227df471d866a8e",
          "linkedWithoutMetadata": "8038bc00aca8b282baaf22076831784a3dfca6770ff6c8898227df471d866a8e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)9113",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9344",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)8047",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)9113": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9344": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)8047": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4616_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4606_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4490)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4616_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4616_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4616_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4567"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4567": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4606_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4606_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4490)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4490": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "a3bfa7ab6cbab690eadf6d99249bd867ff1b289981608baeb6966d14555af0f3",
          "withoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da",
          "linkedWithoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)9113",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9344",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)8047",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)8086_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)8077_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)9113": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9344": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)8047": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)8086_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)8086_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)8077_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)8077_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8077_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d95677391d1cb732e8af565e5e532b01b9281966c795df7c5632c62753b9700d",
          "withoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292",
          "linkedWithoutMetadata": "1d834fa951fe6a12289fd8c3b14175c2a03d4dc442ef8e4f2679b3e2da52f292"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)9113",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)9113": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "93ac94403c8f6ce1cd463cbcdb5e0ee529fe7990da562670fcc52038ab71611e",
          "withoutMetadata": "8038bc00aca8b282baaf22076831784a3dfca6770ff6c8898227df471d866a8e",
          "linkedWithoutMetadata": "8038bc00aca8b282baaf22076831784a3dfca6770ff6c8898227df471d866a8e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)9109",
              "src": "contracts/LoserPredictionPool.sol:49"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9340",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "bnbPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)8043",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3488_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))",
              "src": "contracts/LoserPredictionPool.sol:63"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)9109": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9340": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)8043": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3488_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3488_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accBNBPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3479_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3479_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3479_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4616_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)4606_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)4490)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)4616_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)4616_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)4616_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4567"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4567": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)4606_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)4606_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)4490)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)4490": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:19",
        "version": {
          "withMetadata": "3f3ba6c18ae23c3630be317cfd76445c28700f4f0a41f063a1d23b7eb32e935c",
          "withoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da",
          "linkedWithoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)9109",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9340",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)8043",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)8082_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)8073_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)9109": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9340": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)8043": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)8082_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)8082_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)8073_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)8073_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8073_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)9109",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)9109": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)3620_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)3630_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)3630_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)3581"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)3581": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)3620_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)3620_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)3504": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "090c8b1216b6e43544b71a3663155a16cb5e51c3067c41018de6bae1ce47461a",
          "withoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da",
          "linkedWithoutMetadata": "2634b2da330f9212e7478193a930cc30ea531050fe770cdf851be3e0ab79e3da"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)7126",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)7357",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7048",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5886_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)7126": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)7357": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7048": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)5886_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)5886_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5877_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5877_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)7126",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)7126": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)3620_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)3630_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)3630_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)3581"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)3581": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)3620_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)3620_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)3504": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "57b4717c4c39678765ddf6ddde9d1f4b240d1923df9b0d82c7cec98bd9aeed81",
          "withoutMetadata": "bb5b4713d67d9d4380914bc6fa613d031addfede24e3eb429283aa9bcc417d1a",
          "linkedWithoutMetadata": "bb5b4713d67d9d4380914bc6fa613d031addfede24e3eb429283aa9bcc417d1a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)7126",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)7357",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7048",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5886_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)7126": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)7357": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7048": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)5886_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)5886_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5877_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5877_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)7126",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)7126": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)3620_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)3630_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)3630_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)3581"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)3581": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)3620_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)3620_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)3504": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "0dc63a663e6e7c80eae64cbacaff01765928d4c411319b29ec55b85eba2f07ac",
          "withoutMetadata": "953b03fc982eb7bdd05d6e09726f108f32e7a0bf87be859cd4ad03aefc87862b",
          "linkedWithoutMetadata": "953b03fc982eb7bdd05d6e09726f108f32e7a0bf87be859cd4ad03aefc87862b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)7110",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)7341",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7032",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5886_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)7110": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)7341": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7032": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)5886_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)5886_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5877_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5877_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)7110",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)7110": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)3620_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)3630_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)3630_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)3581"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)3581": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)3620_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)3620_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)3504": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "bea9372c3de302f652a402bd917806c8a8c55d0e975984b8dcc4d16049b6b282",
          "withoutMetadata": "917d88dd2a87de10ad11b345ec0363233f66da45f1d2e2adf2709a31c9115403",
          "linkedWithoutMetadata": "917d88dd2a87de10ad11b345ec0363233f66da45f1d2e2adf2709a31c9115403"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)7119",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)7350",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7041",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5886_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)7119": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)7350": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7041": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)5886_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)5886_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5877_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5877_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)7119",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)7119": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "54685361102a509eb564ca3807867858a50fdbae613d885d1c3ef297e71c84a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6ee2722e24cd90f36a7a4dd74fe226d06abf26132fbf3d369b2e3496ff9865c1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "ba97f2e7620c31c2a6fa8ca089d1f8dd55534d37bdd3daab77bbf2ece7999d6b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1497_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1497_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "c42a9ee0cf03cc0df154ac1688c54776ca09e57faa5a2d03988bc6e68b71e1f5",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "c292c36339de9ae310abfd1c49126bb0b3a7c3794252fc35ae08ece8a199a6c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "b6e971da205d63bf17b56437d35a741caf260529d8ad3d7feec8a5ba2a815d5f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "1eda1644ed922e88f904a7c4b0f0a91f66330d01b94583eb755c72bbc1cf3eb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "bdb19fffe7ef99ba88357376a5a23efd90d808d5b157b5e166f0cd5b5e37ee70",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "11e0d88d5b3d6332832ad38b48bae0ddc675a31bcbf6b15c670c6116bffdc576",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "d3bea5f64cdd1914276bbda4eada6881538e01dd25ab5b2068e7b40a72a83cbc",
          "withoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8",
          "linkedWithoutMetadata": "b1ae7f88a1aaef31545a362d9ee568aef7b1ec8e7cddaf12ad041f3e15927ba8"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)3620_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)3630_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)3630_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)3630_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)3581"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)3581": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)3620_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)3620_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)3504)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)3504": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "72397d0e33febd9cd40a1a70281877d76298275b7dafbe251519e6901f887e32",
          "withoutMetadata": "efe1949755e954fef132449afaf3d57b4583a1752d4175aa0f8df9cd48ab1f2e",
          "linkedWithoutMetadata": "efe1949755e954fef132449afaf3d57b4583a1752d4175aa0f8df9cd48ab1f2e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)7111",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)7342",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7033",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5886_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)7111": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)7342": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7033": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)5886_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)5886_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5877_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5877_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5877_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "9283e2d03cbf8926246fbcacb3369c06029dc888c70afa708dcd4f0d1b6f1bda",
          "withoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686",
          "linkedWithoutMetadata": "5d7af7d75fbe91f3736299c19b8f581042e705460f6a288490bb604f0d702686"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)7111",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)7111": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "50194e2c8f369209ae9dbffffb2503c28f713e52a22302bfcf1529b73c8e70b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "7dee6dc5502e621ab05b7e4a3c6f3a7d0358057c027c6daf2d0bd03123717c02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1439_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "26611e32a15a00144207b601573c8db0b03bac6851e9edb16d9974217ed40294",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45f8d5e7b12e84abff31e4576589cf16a98bd479b8e759043b0b91eda6644ea0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "b9b69227d9ed52b269d0d2f06ce3f67d8575e14463e2a189dc775b8105fb7609",
          "withoutMetadata": "971494755ca2df1dc6e91f152cc78aac6aa7e9d6e04d01aa0552306f5c6f1818",
          "linkedWithoutMetadata": "971494755ca2df1dc6e91f152cc78aac6aa7e9d6e04d01aa0552306f5c6f1818"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)3973",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)4204",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)3895",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2748_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)3973": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)4204": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)3895": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)2748_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)2748_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2739_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)2739_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "01d0571294e6ef183fb5855a5335cf80db5e4a05c8e320e02dc9c41a9b8a961e",
          "withoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd",
          "linkedWithoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3973",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)3973": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b6a287dcfd3237f5abb3d18109e2a8869e762a661c81a43a429580b339f5a36c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/Prediction.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "8fadee56aa94f063c7f5a5021e652b995f0de36d51573e6d74110c853007f6e8",
          "withoutMetadata": "bd79c923480b147ed0c9f242bf02ef247dd8521cf5ef94ed1a557e3f74bc59d2",
          "linkedWithoutMetadata": "bd79c923480b147ed0c9f242bf02ef247dd8521cf5ef94ed1a557e3f74bc59d2"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)1658_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)1648_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)1532)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)1658_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)1658_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)1658_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)1609"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)1609": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)1648_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)1648_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)1532)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)1532": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "4b02c7c4618a233d529627e6230f71daa785f734dd01e5338467cd7b2d43fbf0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/Prediction.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:70",
        "version": {
          "withMetadata": "8fadee56aa94f063c7f5a5021e652b995f0de36d51573e6d74110c853007f6e8",
          "withoutMetadata": "bd79c923480b147ed0c9f242bf02ef247dd8521cf5ef94ed1a557e3f74bc59d2",
          "linkedWithoutMetadata": "bd79c923480b147ed0c9f242bf02ef247dd8521cf5ef94ed1a557e3f74bc59d2"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setOracles(address[],address[])",
          "setOracleUpdateAllowance(uint256)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:82"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:83"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:85"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:86"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:87"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:89"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:90"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:91"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:93"
            },
            {
              "contract": "Prediction",
              "label": "oracleLatestRoundId",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:95"
            },
            {
              "contract": "Prediction",
              "label": "oracleUpdateAllowance",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:96"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)1658_storage))",
              "src": "contracts/Prediction.sol:100"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)1648_storage)",
              "src": "contracts/Prediction.sol:101"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:102"
            },
            {
              "contract": "Prediction",
              "label": "oracles",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)1532)",
              "src": "contracts/Prediction.sol:103"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Prediction.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)1658_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)1658_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)1658_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)1609"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)1609": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)1648_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)1648_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "lockedOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "closeOracleIds",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)1532)": {
              "label": "mapping(address => contract AggregatorV3Interface)"
            },
            "t_contract(AggregatorV3Interface)1532": {
              "label": "contract AggregatorV3Interface"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "4b02c7c4618a233d529627e6230f71daa785f734dd01e5338467cd7b2d43fbf0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1439_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "26611e32a15a00144207b601573c8db0b03bac6851e9edb16d9974217ed40294",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45f8d5e7b12e84abff31e4576589cf16a98bd479b8e759043b0b91eda6644ea0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "16ef85dc097eea70f0b6883425a2b33ee9ae14c4f0b7a2e88dd268117d5589de",
          "withoutMetadata": "e92cd45aa87e83359c5d00ec827c468e067abc41c3b36c4b3bfa66a762e72dee",
          "linkedWithoutMetadata": "e92cd45aa87e83359c5d00ec827c468e067abc41c3b36c4b3bfa66a762e72dee"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)3973",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)4204",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)3895",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2748_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)3973": {
              "label": "contract IBEP20"
            },
            "t_contract(Prediction)4204": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)3895": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)2748_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)2748_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2739_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)2739_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "01d0571294e6ef183fb5855a5335cf80db5e4a05c8e320e02dc9c41a9b8a961e",
          "withoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd",
          "linkedWithoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3973",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)3973": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b6a287dcfd3237f5abb3d18109e2a8869e762a661c81a43a429580b339f5a36c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1439_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "26611e32a15a00144207b601573c8db0b03bac6851e9edb16d9974217ed40294",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45f8d5e7b12e84abff31e4576589cf16a98bd479b8e759043b0b91eda6644ea0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "3e43d7bfd6e796a842e987fd7591c2bd8fc28042eb86de832eeea54e83534536",
          "withoutMetadata": "39d422ef9db73f30deaea30b927e2f3d185a5be854b98120e51043acf55ae88f",
          "linkedWithoutMetadata": "39d422ef9db73f30deaea30b927e2f3d185a5be854b98120e51043acf55ae88f"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "set(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setAllocPoint(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)3983",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)4214",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)3905",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2748_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)3983": {
              "label": "contract IBEP20"
            },
            "t_contract(Prediction)4214": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)3905": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)2748_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)2748_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2739_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2739_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)2739_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "01d0571294e6ef183fb5855a5335cf80db5e4a05c8e320e02dc9c41a9b8a961e",
          "withoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd",
          "linkedWithoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3983",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)3983": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b6a287dcfd3237f5abb3d18109e2a8869e762a661c81a43a429580b339f5a36c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "e28192ef7588c689dda5ff6f06eab10403eb5a7129a30c50bb58549919a5bfd1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1439_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1439_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "995abfd5901dc380f3fed9da99f86b86b04d5a1bbe1a1ce59071222e12ce57ec",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "26611e32a15a00144207b601573c8db0b03bac6851e9edb16d9974217ed40294",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "45f8d5e7b12e84abff31e4576589cf16a98bd479b8e759043b0b91eda6644ea0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "a3de9332ec4af4ea406c833a8aa95c2c564822286fcaa60fb9d4ffed2b72363b",
          "withoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267",
          "linkedWithoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "2d6ea808679a9f970e713497fab594ddc70fcd78a677f8af12872225ba4e01e3",
          "withoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455",
          "linkedWithoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/PredictionPool.sol:19",
        "version": {
          "withMetadata": "3f6a16912fa8055fb7cae7b9d99eb4750552364f8a521016a122bd328bf81ec6",
          "withoutMetadata": "04873d97c47af44d092d9af952fb499075b312767fec9812da69f2a50200b800",
          "linkedWithoutMetadata": "04873d97c47af44d092d9af952fb499075b312767fec9812da69f2a50200b800"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add()",
          "set(uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setAllocPoint(uint256)",
          "setMaxPredDeposit(uint256)",
          "getPoolLength()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "pred",
              "type": "t_contract(IBEP20)4651",
              "src": "contracts/PredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)4882",
              "src": "contracts/PredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)4573",
              "src": "contracts/PredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxPredDeposit",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3430_storage)dyn_storage",
              "src": "contracts/PredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3421_storage))",
              "src": "contracts/PredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/PredictionPool.sol:69"
            }
          ],
          "types": {
            "t_contract(IBEP20)4651": {
              "label": "contract IBEP20"
            },
            "t_contract(Prediction)4882": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)4573": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3430_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3430_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3421_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3421_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3421_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "01d0571294e6ef183fb5855a5335cf80db5e4a05c8e320e02dc9c41a9b8a961e",
          "withoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd",
          "linkedWithoutMetadata": "bd0770111f08ecd771a6ed229a0c381b8cf6058ad361772aa5f4b3c2071d4edd"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)",
          "safeBNBTransfer(address,uint256)",
          "safePredTransfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)4651",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)4651": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonLastRound(address)",
          "lostLastRound(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b6a287dcfd3237f5abb3d18109e2a8869e762a661c81a43a429580b339f5a36c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/PredToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/PredToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/PredToken.sol:281",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/PredToken.sol:289"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/PredToken.sol:282"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Predictcoin": {
        "src": "contracts/PredToken.sol:328",
        "version": {
          "withMetadata": "e487e74a51ff7cc3fcddac2e533664e6ef54e96596051a6fa121f4529643e916",
          "withoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54",
          "linkedWithoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "_burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Predictcoin",
            "src": "contracts/PredToken.sol:340"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Predictcoin",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/PredToken.sol:331"
            },
            {
              "contract": "Predictcoin",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/PredToken.sol:333"
            },
            {
              "contract": "Predictcoin",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/PredToken.sol:335"
            },
            {
              "contract": "Predictcoin",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/PredToken.sol:336"
            },
            {
              "contract": "Predictcoin",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:337"
            },
            {
              "contract": "Predictcoin",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:338"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/PredToken.sol:133",
        "version": {
          "withMetadata": "b5fe2ed2b7cda9655ad22779edd0e938200964cc5b77cc94f04d3fb789552828",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/PredToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/PredToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/PredToken.sol:281",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/PredToken.sol:289"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/PredToken.sol:282"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Predictcoin": {
        "src": "contracts/PredToken.sol:328",
        "version": {
          "withMetadata": "e487e74a51ff7cc3fcddac2e533664e6ef54e96596051a6fa121f4529643e916",
          "withoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54",
          "linkedWithoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "_burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Predictcoin",
            "src": "contracts/PredToken.sol:340"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Predictcoin",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/PredToken.sol:331"
            },
            {
              "contract": "Predictcoin",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/PredToken.sol:333"
            },
            {
              "contract": "Predictcoin",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/PredToken.sol:335"
            },
            {
              "contract": "Predictcoin",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/PredToken.sol:336"
            },
            {
              "contract": "Predictcoin",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:337"
            },
            {
              "contract": "Predictcoin",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:338"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/PredToken.sol:133",
        "version": {
          "withMetadata": "b5fe2ed2b7cda9655ad22779edd0e938200964cc5b77cc94f04d3fb789552828",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "fde3f15d183e5e4adb501d42de9202b654fb1ba86f54e91669d295220ea9dc67",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d97ce47a76206ff30e04246fd1439c8c09a0fbbdda81ab79e81107994b19dce6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "995abfd5901dc380f3fed9da99f86b86b04d5a1bbe1a1ce59071222e12ce57ec",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "26611e32a15a00144207b601573c8db0b03bac6851e9edb16d9974217ed40294",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/Farm.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts/Farm.sol:36",
        "version": {
          "withMetadata": "97869c51f620d9ff7a6a70c5efa26fe53932b9fce7bb8a29761a2d45206e4ec9",
          "withoutMetadata": "82009828adf055a75499ff9c23fa47ccd2d8a7f8c4978bf9bf88aa18ab29a9e4",
          "linkedWithoutMetadata": "82009828adf055a75499ff9c23fa47ccd2d8a7f8c4978bf9bf88aa18ab29a9e4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "compound()",
          "emergencyWithdraw(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3872",
              "src": "contracts/Farm.sol:66"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts/Farm.sol:68"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/Farm.sol:70"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)2520",
              "src": "contracts/Farm.sol:72"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3794",
              "src": "contracts/Farm.sol:74"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2550_storage)dyn_storage",
              "src": "contracts/Farm.sol:77"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2540_storage))",
              "src": "contracts/Farm.sol:79"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Farm.sol:81"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Farm.sol:83"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/Farm.sol:85"
            }
          ],
          "types": {
            "t_contract(IBEP20)3872": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)2520": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3794": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)2550_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)2550_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3872"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2540_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2540_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)2540_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "a3de9332ec4af4ea406c833a8aa95c2c564822286fcaa60fb9d4ffed2b72363b",
          "withoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267",
          "linkedWithoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "2d6ea808679a9f970e713497fab594ddc70fcd78a677f8af12872225ba4e01e3",
          "withoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455",
          "linkedWithoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts/MasterPredWallet.sol:8",
        "version": {
          "withMetadata": "4bc0088c6f02c22311b6cf18208402d46ebbbe1b5f17e93475acb8a76d6f18b0",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts/MasterPredWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3872",
              "src": "contracts/MasterPredWallet.sol:11"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts/MasterPredWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)3872": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b6a287dcfd3237f5abb3d18109e2a8869e762a661c81a43a429580b339f5a36c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/PredToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/PredToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/PredToken.sol:281",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/PredToken.sol:289"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/PredToken.sol:282"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Predictcoin": {
        "src": "contracts/PredToken.sol:328",
        "version": {
          "withMetadata": "e487e74a51ff7cc3fcddac2e533664e6ef54e96596051a6fa121f4529643e916",
          "withoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54",
          "linkedWithoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "_burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Predictcoin",
            "src": "contracts/PredToken.sol:340"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Predictcoin",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/PredToken.sol:331"
            },
            {
              "contract": "Predictcoin",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/PredToken.sol:333"
            },
            {
              "contract": "Predictcoin",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/PredToken.sol:335"
            },
            {
              "contract": "Predictcoin",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/PredToken.sol:336"
            },
            {
              "contract": "Predictcoin",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:337"
            },
            {
              "contract": "Predictcoin",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/PredToken.sol:338"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/PredToken.sol:133",
        "version": {
          "withMetadata": "b5fe2ed2b7cda9655ad22779edd0e938200964cc5b77cc94f04d3fb789552828",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:36",
        "version": {
          "withMetadata": "345596e8512e29732ff4c000303ce4fdc50d4bbb608d7b54376479faada513dd",
          "withoutMetadata": "07fe0e09d53f0234005f481e5fbd0add5489fbe51e7fed194321b90a99036747",
          "linkedWithoutMetadata": "07fe0e09d53f0234005f481e5fbd0add5489fbe51e7fed194321b90a99036747"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "compound()",
          "emergencyWithdraw(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3215",
              "src": "contracts\\Farm.sol:66"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:68"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:70"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1896",
              "src": "contracts\\Farm.sol:72"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3137",
              "src": "contracts\\Farm.sol:74"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1926_storage)dyn_storage",
              "src": "contracts\\Farm.sol:77"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))",
              "src": "contracts\\Farm.sol:79"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:81"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:83"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:85"
            }
          ],
          "types": {
            "t_contract(IBEP20)3215": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1896": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3137": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1926_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1926_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3215"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1916_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1916_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:9",
        "version": {
          "withMetadata": "92677fbd5f6aaf7285f416d22abe012f5f1639c34d2a95cd16be8b3153a25f43",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3215",
              "src": "contracts\\MasterPredWallet.sol:12"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:13"
            }
          ],
          "types": {
            "t_contract(IBEP20)3215": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:36",
        "version": {
          "withMetadata": "b59529a979bbf91407ff1b92952d8e478f0aaf7d088205fa2e3b363f44001081",
          "withoutMetadata": "223517d5b80dce1c27c92ae7012e47f1a9a17eb4a74e5918922f3c8121062ea1",
          "linkedWithoutMetadata": "223517d5b80dce1c27c92ae7012e47f1a9a17eb4a74e5918922f3c8121062ea1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3094",
              "src": "contracts\\Farm.sol:66"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:68"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:70"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1896",
              "src": "contracts\\Farm.sol:72"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3016",
              "src": "contracts\\Farm.sol:74"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1926_storage)dyn_storage",
              "src": "contracts\\Farm.sol:77"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))",
              "src": "contracts\\Farm.sol:79"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:81"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:83"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:85"
            }
          ],
          "types": {
            "t_contract(IBEP20)3094": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1896": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3016": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1926_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1926_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3094"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1916_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1916_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:9",
        "version": {
          "withMetadata": "92677fbd5f6aaf7285f416d22abe012f5f1639c34d2a95cd16be8b3153a25f43",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3094",
              "src": "contracts\\MasterPredWallet.sol:12"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:13"
            }
          ],
          "types": {
            "t_contract(IBEP20)3094": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:36",
        "version": {
          "withMetadata": "431de8c275b9e3326435501e2d5f5f04985167e2d463918e39b67c4a3f143ef0",
          "withoutMetadata": "cf4e5e97b245c21a0806847138d60c223591c565c308ebe9d75285880fb8dd14",
          "linkedWithoutMetadata": "cf4e5e97b245c21a0806847138d60c223591c565c308ebe9d75285880fb8dd14"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3094",
              "src": "contracts\\Farm.sol:66"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:68"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:70"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1896",
              "src": "contracts\\Farm.sol:72"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3016",
              "src": "contracts\\Farm.sol:74"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1926_storage)dyn_storage",
              "src": "contracts\\Farm.sol:77"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))",
              "src": "contracts\\Farm.sol:79"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:81"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:83"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:85"
            }
          ],
          "types": {
            "t_contract(IBEP20)3094": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1896": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3016": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1926_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1926_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3094"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1916_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1916_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:9",
        "version": {
          "withMetadata": "92677fbd5f6aaf7285f416d22abe012f5f1639c34d2a95cd16be8b3153a25f43",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3094",
              "src": "contracts\\MasterPredWallet.sol:12"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:13"
            }
          ],
          "types": {
            "t_contract(IBEP20)3094": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:36",
        "version": {
          "withMetadata": "f9ce143e302fa073d475e7e44b86efc9149dc7b8334f308d40de9a0da0f58d97",
          "withoutMetadata": "f02b51e28d99e7ae92695624a1177c2e677a7427ee6bf82eb9b7a7de0bc62dd6",
          "linkedWithoutMetadata": "f02b51e28d99e7ae92695624a1177c2e677a7427ee6bf82eb9b7a7de0bc62dd6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3079",
              "src": "contracts\\Farm.sol:66"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:68"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:70"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1896",
              "src": "contracts\\Farm.sol:72"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3001",
              "src": "contracts\\Farm.sol:74"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1926_storage)dyn_storage",
              "src": "contracts\\Farm.sol:77"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))",
              "src": "contracts\\Farm.sol:79"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:81"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:83"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:85"
            }
          ],
          "types": {
            "t_contract(IBEP20)3079": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1896": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3001": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1926_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1926_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3079"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1916_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1916_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1916_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:9",
        "version": {
          "withMetadata": "92677fbd5f6aaf7285f416d22abe012f5f1639c34d2a95cd16be8b3153a25f43",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3079",
              "src": "contracts\\MasterPredWallet.sol:12"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:13"
            }
          ],
          "types": {
            "t_contract(IBEP20)3079": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:35",
        "version": {
          "withMetadata": "1db0c7eebb07d77cd0ccc3c134558dc39a538d3dc6cf0f2a8e11eac6a09490ea",
          "withoutMetadata": "cfc6c577d6a78fababdd849c78f372b5931d194275703d09efcd20fa62aa4e7b",
          "linkedWithoutMetadata": "cfc6c577d6a78fababdd849c78f372b5931d194275703d09efcd20fa62aa4e7b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)2939",
              "src": "contracts\\Farm.sol:65"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:67"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:69"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1782",
              "src": "contracts\\Farm.sol:71"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)2861",
              "src": "contracts\\Farm.sol:73"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1810_storage)dyn_storage",
              "src": "contracts\\Farm.sol:76"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1800_storage))",
              "src": "contracts\\Farm.sol:78"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:80"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:82"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:84"
            }
          ],
          "types": {
            "t_contract(IBEP20)2939": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1782": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)2861": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1810_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1810_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)2939"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1800_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1800_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1800_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:9",
        "version": {
          "withMetadata": "92677fbd5f6aaf7285f416d22abe012f5f1639c34d2a95cd16be8b3153a25f43",
          "withoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e",
          "linkedWithoutMetadata": "7900dbc7f9b11fd4a1f316a8d31537c594bb2c326e3dc4577a5fdf8c19bdf20e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "setMasterPred(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)2939",
              "src": "contracts\\MasterPredWallet.sol:12"
            },
            {
              "contract": "MasterPredWallet",
              "label": "MasterPred",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:13"
            }
          ],
          "types": {
            "t_contract(IBEP20)2939": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:35",
        "version": {
          "withMetadata": "5184c995fb715a80acbacefd1118e5db34a0f8d3d9e3bcc8e29e8e1a6df5d5c1",
          "withoutMetadata": "cfc6c577d6a78fababdd849c78f372b5931d194275703d09efcd20fa62aa4e7b",
          "linkedWithoutMetadata": "cfc6c577d6a78fababdd849c78f372b5931d194275703d09efcd20fa62aa4e7b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)2800",
              "src": "contracts\\Farm.sol:65"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:67"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:69"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1657",
              "src": "contracts\\Farm.sol:71"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)2722",
              "src": "contracts\\Farm.sol:73"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1685_storage)dyn_storage",
              "src": "contracts\\Farm.sol:76"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1675_storage))",
              "src": "contracts\\Farm.sol:78"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:80"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:82"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:84"
            }
          ],
          "types": {
            "t_contract(IBEP20)2800": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1657": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)2722": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1685_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1685_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)2800"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1675_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1675_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1675_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:8",
        "version": {
          "withMetadata": "84d0183a2c96f59a5c051fec5e995decff992c365b25bbf576a36ebf402f9bd0",
          "withoutMetadata": "8c373a6fbd47de537815f21b6c5da9324b19655195757579e8bd73755f49d764",
          "linkedWithoutMetadata": "8c373a6fbd47de537815f21b6c5da9324b19655195757579e8bd73755f49d764"
        },
        "inherit": [],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address,address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)2800",
              "src": "contracts\\MasterPredWallet.sol:11"
            },
            {
              "contract": "MasterPredWallet",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)2800": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:35",
        "version": {
          "withMetadata": "6671838273fa389da6f5e1eb44f4bda6c503a3108a7bae6594ce61922241f87c",
          "withoutMetadata": "8ec084f3006c1127d6cd1e3277c5a92be761fc874d7d22c2d7487fff21712e1c",
          "linkedWithoutMetadata": "8ec084f3006c1127d6cd1e3277c5a92be761fc874d7d22c2d7487fff21712e1c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)2799",
              "src": "contracts\\Farm.sol:65"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:67"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:69"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)1657",
              "src": "contracts\\Farm.sol:71"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)2721",
              "src": "contracts\\Farm.sol:73"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)1685_storage)dyn_storage",
              "src": "contracts\\Farm.sol:76"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1675_storage))",
              "src": "contracts\\Farm.sol:78"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:80"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:82"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:84"
            }
          ],
          "types": {
            "t_contract(IBEP20)2799": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)1657": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)2721": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)1685_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)1685_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)2799"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1675_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)1675_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)1675_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:8",
        "version": {
          "withMetadata": "5676fe41e385b9bfc4737d9102c53807f35aac9a6b3654e4f63adabb2e203f95",
          "withoutMetadata": "a8cb3b4bc9b877d3bac873c439d04b3f341972e74222427e9cd8f73b95bd112e",
          "linkedWithoutMetadata": "a8cb3b4bc9b877d3bac873c439d04b3f341972e74222427e9cd8f73b95bd112e"
        },
        "inherit": [],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)2799",
              "src": "contracts\\MasterPredWallet.sol:11"
            },
            {
              "contract": "MasterPredWallet",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)2799": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:233"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:64"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "6430d93f2aab998b899c00750654b663c20f37fb9b4d00889938333d55223cbc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "3180876e67d2d148a09d11c359a76ed7ce9d8fcec3e4f5d0946908be1ae862ed",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "14fb20974a9b7fb630aed8552a124061a07d574964f121a3a72200adffa4d259",
          "withoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724",
          "linkedWithoutMetadata": "575c5160413ce582addde4a211c5258ab8c1045af2eeee360192553893308724"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "c132b0b60fbbece78c1c2e398fd9ec7a13403aab7a0feff9866c413c03c173d4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "0023e734e710c06754cbf37a92d68bb6f42a4cc6d154a145d945ec780b06c2f2",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts\\Farm.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPred": {
        "src": "contracts\\Farm.sol:35",
        "version": {
          "withMetadata": "2fb38bd3893cf7ac9e9f980deffab3189f1afe5aadbaa4e568995d5f846f4b24",
          "withoutMetadata": "3e076054d6fe97066d5651a0fc6c71db48c900b43e078c6e09462abd76115468",
          "linkedWithoutMetadata": "3e076054d6fe97066d5651a0fc6c71db48c900b43e078c6e09462abd76115468"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,uint256,uint256)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingPred(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "BONUS_MULTIPLIER",
            "src": "contracts\\Farm.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts\\Farm.sol:80"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPred",
              "label": "pred",
              "type": "t_contract(IBEP20)3500",
              "src": "contracts\\Farm.sol:65"
            },
            {
              "contract": "MasterPred",
              "label": "predPerBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:67"
            },
            {
              "contract": "MasterPred",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:69"
            },
            {
              "contract": "MasterPred",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)2327",
              "src": "contracts\\Farm.sol:71"
            },
            {
              "contract": "MasterPred",
              "label": "wallet",
              "type": "t_contract(MasterPredWallet)3422",
              "src": "contracts\\Farm.sol:73"
            },
            {
              "contract": "MasterPred",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2355_storage)dyn_storage",
              "src": "contracts\\Farm.sol:76"
            },
            {
              "contract": "MasterPred",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2345_storage))",
              "src": "contracts\\Farm.sol:78"
            },
            {
              "contract": "MasterPred",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:80"
            },
            {
              "contract": "MasterPred",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:82"
            },
            {
              "contract": "MasterPred",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts\\Farm.sol:84"
            }
          ],
          "types": {
            "t_contract(IBEP20)3500": {
              "label": "contract IBEP20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)2327": {
              "label": "contract IMigratorChef"
            },
            "t_contract(MasterPredWallet)3422": {
              "label": "contract MasterPredWallet"
            },
            "t_array(t_struct(PoolInfo)2355_storage)dyn_storage": {
              "label": "struct MasterPred.PoolInfo[]"
            },
            "t_struct(PoolInfo)2355_storage": {
              "label": "struct MasterPred.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IBEP20)3500"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accPredPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2345_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterPred.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2345_storage)": {
              "label": "mapping(address => struct MasterPred.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)2345_storage": {
              "label": "struct MasterPred.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts\\LPTokens.sol:7",
        "version": {
          "withMetadata": "6c308ceb11d7be004401048bf993b95e48f2ac10a5c3428adec7601db824b530",
          "withoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267",
          "linkedWithoutMetadata": "1729fe18bcfb9d0311afd1f5940cd1771c77f0b2ffbe2d293e9e5884c1370267"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts\\LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts\\LPTokens.sol:13",
        "version": {
          "withMetadata": "ee0a94105a2e1ee699b4c1d25482377a3c4b01e20599220f1cb03b23458c1a08",
          "withoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455",
          "linkedWithoutMetadata": "bdd3ad7a00474fee9e4cee8ae6d8ec39f418aeca967edf3c04d2d7e2a52e1455"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts\\LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterPredWallet": {
        "src": "contracts\\MasterPredWallet.sol:8",
        "version": {
          "withMetadata": "5676fe41e385b9bfc4737d9102c53807f35aac9a6b3654e4f63adabb2e203f95",
          "withoutMetadata": "a8cb3b4bc9b877d3bac873c439d04b3f341972e74222427e9cd8f73b95bd112e",
          "linkedWithoutMetadata": "a8cb3b4bc9b877d3bac873c439d04b3f341972e74222427e9cd8f73b95bd112e"
        },
        "inherit": [],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safePredTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterPredWallet",
            "src": "contracts\\MasterPredWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterPredWallet",
              "label": "pred",
              "type": "t_contract(IBEP20)3500",
              "src": "contracts\\MasterPredWallet.sol:11"
            },
            {
              "contract": "MasterPredWallet",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\MasterPredWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)3500": {
              "label": "contract IBEP20"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\interfaces\\IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts\\utils\\SafeBEP20.sol:17",
        "version": {
          "withMetadata": "ab9646231a831c0711fd4bc7a1d6d887b5298e4b4e5f1a41b5beb008a19b143d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\PredToken.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\PredToken.sol:281",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\PredToken.sol:289"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\PredToken.sol:282"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PredToken.sol:133",
        "version": {
          "withMetadata": "95c36cc40a3e659241ebae0b41eb73c9a33e597836bc71dc639e679448c7cc87",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:35",
        "version": {
          "withMetadata": "9a6e0d6ec1e6fed2310858ff69d6aba679bc951e3314dc3e46ec8040bdf0d752",
          "withoutMetadata": "8a892efd5b82def5bf507bd1b979817d6f17569a59027e9144a78df0a9f78530",
          "linkedWithoutMetadata": "8a892efd5b82def5bf507bd1b979817d6f17569a59027e9144a78df0a9f78530"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:39"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:41"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:43"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:45"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:46"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@pancakeswap\\pancake-swap-lib\\contracts\\token\\BEP20\\BEP20.sol:47"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\PredToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@pancakeswap\\pancake-swap-lib\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "733de8935389ab6c4b724d3258586d84eadb0f2ec010dca674acdac4384d60f1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts\\BEP20.sol:7",
        "version": {
          "withMetadata": "177b541fb09ea5c5ac57a1fe369e71415c358bbe041cda27ca4dc7f3ed5758b4",
          "withoutMetadata": "cdfdf75328acf37a19a101dae9fb7202d26e1943073b9b84ea2c0be88dedd2ea",
          "linkedWithoutMetadata": "cdfdf75328acf37a19a101dae9fb7202d26e1943073b9b84ea2c0be88dedd2ea"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts\\BEP20.sol:13",
        "version": {
          "withMetadata": "ae6c618c82e7986c7007ae31c56b862b200b39ea142816502396d6514dc1cde6",
          "withoutMetadata": "068d337781ae2c1926ce6bedddb7645fc5a8778bb10a1877dafc3ef40c9d63b3",
          "linkedWithoutMetadata": "068d337781ae2c1926ce6bedddb7645fc5a8778bb10a1877dafc3ef40c9d63b3"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts\\BEP20.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Predictcoin": {
        "src": "contracts\\PredToken.sol:328",
        "version": {
          "withMetadata": "0425be3248a33735a201ee161a47755de1f83f26d0f2db382869874ff616a427",
          "withoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54",
          "linkedWithoutMetadata": "f7311a941eeaf36bf25f3f25b258af4478d1c1b6243f0a2c74c543f4b19cef54"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "_burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Predictcoin",
            "src": "contracts\\PredToken.sol:340"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Predictcoin",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\PredToken.sol:331"
            },
            {
              "contract": "Predictcoin",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\PredToken.sol:333"
            },
            {
              "contract": "Predictcoin",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\PredToken.sol:335"
            },
            {
              "contract": "Predictcoin",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\PredToken.sol:336"
            },
            {
              "contract": "Predictcoin",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\PredToken.sol:337"
            },
            {
              "contract": "Predictcoin",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\PredToken.sol:338"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}