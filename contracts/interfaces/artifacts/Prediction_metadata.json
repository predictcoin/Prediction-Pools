{
	"compiler": {
		"version": "0.8.2+commit.661d1103"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_tokens",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_oracles",
						"type": "address[]"
					}
				],
				"name": "addTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "epochs",
						"type": "uint256[]"
					}
				],
				"name": "claim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endRound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_round",
						"type": "uint256"
					}
				],
				"name": "getRound",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lockedTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "closeTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalAmount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "oraclesCalled",
						"type": "bool"
					},
					{
						"internalType": "address[]",
						"name": "_tokens",
						"type": "address[]"
					},
					{
						"internalType": "int256[]",
						"name": "lockedPrices",
						"type": "int256[]"
					},
					{
						"internalType": "int256[]",
						"name": "closePrices",
						"type": "int256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "lockedOracleIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "closeOracleIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "bets",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTokens",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "size",
						"type": "uint256"
					}
				],
				"name": "getUserRounds",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "enum Prediction.Position",
								"name": "position",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "claimed",
								"type": "bool"
							}
						],
						"internalType": "struct Prediction.BetInfo[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserRoundsLength",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "loser",
						"type": "address"
					}
				],
				"name": "lostLastRound",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "predictBear",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "predictBull",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "refundable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "removeTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startRound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "wonLastRound",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"claim(uint256[])": {
					"params": {
						"epochs": ": array of epochs"
					}
				},
				"getUserRounds(address,uint256,uint256)": {
					"params": {
						"cursor": ": cursor",
						"size": ": size",
						"user": ": user address"
					}
				},
				"getUserRoundsLength(address)": {
					"params": {
						"user": ": user address"
					}
				},
				"predictBear(uint256,address)": {
					"params": {
						"epoch": ": epoch"
					}
				},
				"predictBull(uint256,address)": {
					"params": {
						"epoch": ": epoch"
					}
				},
				"refundable(uint256,address)": {
					"params": {
						"epoch": ": epoch",
						"user": ": user address"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claim(uint256[])": {
					"notice": "Claim refund for an array of epochs"
				},
				"getUserRounds(address,uint256,uint256)": {
					"notice": "Returns round epochs and bet information for a user that has participated"
				},
				"getUserRoundsLength(address)": {
					"notice": "Returns round epochs length"
				},
				"predictBear(uint256,address)": {
					"notice": "Bet bear position"
				},
				"predictBull(uint256,address)": {
					"notice": "Bet bull position"
				},
				"refundable(uint256,address)": {
					"notice": "Get the refundable stats of specific epoch and user account"
				},
				"wonLastRound(address)": {
					"notice": "Checks if an address won the last round"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/interfaces/IPrediction.sol": "Prediction"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 99
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5ec4671e17a3a805bc75e989180616001f5fad2043da849e9e8c1dae2805ed3",
				"dweb:/ipfs/QmeVryqLgUYRDJhFgv957unYkEg8pqNENsUZnmvm176Fno"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
			"keccak256": "0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2",
			"license": "MIT",
			"urls": [
				"bzz-raw://ee1d07bdca88963856bf0ddbd2be0d3d7285ac7e864abc799f6aac1a4adc1b46",
				"dweb:/ipfs/QmTZnzocbiH7Jesr9BuNAAnJ3oZzE4SercgyjAfkGmmgXM"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7",
			"license": "MIT",
			"urls": [
				"bzz-raw://3b80d20ed113ad0be486d489e1cc2f0f4006b7893e579c2156e8c434d8eec382",
				"dweb:/ipfs/QmdB8QGghkRGcSkp4xAWCvohGgYXFU9ncMx82XSqDMiZJf"
			]
		},
		"contracts/interfaces/IPrediction.sol": {
			"keccak256": "0x602bc44a7633ff2d269822cf3e2e3483ed1cc66c19790634ce569afa6f208cb8",
			"urls": [
				"bzz-raw://a47349126b46bee9b72f25b638bca006d0d079c2673e162e23cc0c4189a43402",
				"dweb:/ipfs/QmV4BE4gx37a2a2AXzAjapvkwamDKA1bmdgZa9midkMEzH"
			]
		}
	},
	"version": 1
}